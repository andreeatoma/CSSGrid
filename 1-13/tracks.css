.container {
  /* display: grid;
     grid-template-columns: 200px 500px; 
     i have EXPLICITLY definded what the columns and rows will be 
    if we don't create them they are call implicit meaning that browsers wraps the element on a new row
    the solid line in dev tools is where the explicit grid starts and ends   
    grid-auto-rows: 100px;  how big the rows are when they have been added, => in Firefox we are not able to define the size of multiple implicit rows, in Chrome we can define 
    grid-auto-flow: column;  will determine if you need to add a new row or column (row is the default), in flexbox we have flex-direction 
    grid-auto-columns: 100px;    
    grid-gap: 20px; */

  /* sizing tracks */
  /* height: 600px;
    border: 10px solid var(--yellow);
    grid-template-columns: auto 1fr;
    grid-template-rows: 1fr 10fr; */
  /* fr unit =  the amount of space left after all the elements are layed out (free space)*/

  /* the repeat function */
  /* grid-template-columns: 100px repeat(2, 1fr auto) 200px repeat(2, 5fr); */
}
/* sizing grid items */
/* .item9 {
        background: mistyrose;
        grid-column: span 2;
        grid-row: span 2; */
/* putting the item as large as I want
    } */

/* placing grid items */
/* .item10 {
        background: #BADA55; 
        grid-column-start: 2;
        grid-column-end: 5;
        grid-column: 2 /5;
        grid-column: span 2, 5;
        grid-column: 1 / span 2;
        grid-column: 1 / -1; 
        grid-row: 3 / 2;
        grid-row: 1 / -1;
    } */

/* spanning and placing cardio */
.container {
  display: grid;
  grid-gap: 20px;
  /* Make the grid 10 columns wide, every other taking up twice the free space */
  grid-template-columns: repeat(5, 1fr 2fr);
  /* Make the grid have 10 explicit rows, 50px high each */
  grid-template-rows: repeat(10, 50px);
}

/* With Item 1, start at col 3 and go until 5 */
.item1 {
  grid-column: 3 / 5;
}

/* With Item 2, start at col 5 and go until the end */
.item2 {
  grid-column: 5 / -1;
}

/* Make Item 5 double span 2 cols and rows */
.item5 {
  grid-column: span 2;
  grid-row: span 2;
}

/* Make Item 8 two rows high */
.item8 {
  grid-row: span 2;
}

/* Make Item 15 span the entire grid width */
.item15 {
  grid-column: 1 / -1;
}

/* Make item 18 span 4 widths, but end 9 */
.item18 {
  grid-column: span 4 / 9;
}

/* Make item 20 start at row 4 and go for 3 */
.item20 {
  grid-row: 4 / span 3;
}

/* auto fit and auto fill */

.container {
  grid-template-columns: repeat(auto-fill, 150px);
  /* auto-fill -> i don't know how many columns i will have, just figure you out
        auto-fit -> when we don't have enough items to fit the container */

  /* auto-fill FILLS the row with as many columns as it can fit. So it creates implicit columns whenever a new column can fit, because it's trying to FILL the row with as many columns as it can. The newly added columns can and may be empty, but they will still occupy a designated space in the row. */

  /* auto-fit FITS the CURRENTLY AVAILABLE columns into the space by expanding them so that they take up any available space. The browser does that after FILLING that extra space with extra columns (as with auto-fill ) and then collapsing the empty ones. */
}

/* using minmax for responsive grids */

.container {
  /* grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); */
  grid-template-columns: fit-content(100px) 150px 150px 150px;
}


/* grid template areas */

